//Difference entre un directory et une chaine random pour >

ls $HOME>> cava 	insere le resultat de ls dans le fichier cava
ls TODO>> cava 		insere "TODO" (str random) dans le fichier cava
ls $hello>> cava 	insere hello=TODO (str random) dans le fichier cava 

Je pense qu'il suffit simplement d'integrer la forme expand de $HOME de $hello et TODO
en arg dans execve et ls se charge du reste

//Difference entre un directory et une chaine random pour <
ls $HOME< cava stdin est redirige vers cava. ls tente de lire
dans $HELLO (format expand), s'il peut alors pas de message d'erreur
et ls affiche "TODO"

//Autre
Que se passe t il si le user fait Ctrl+D dans un heredoc non fermé. Bash semble renvoyer :
bash: warning: here-document at line [XXX] delimited by end-of-file (wanted `[le mot en question]')

//A gerer en priorité

GOOD TO KMOW :
- Si le delim contient des quotes alors on n'expand pas les var d'env contenus dans le fichier tmp.txt.
- Si le delim est une var d'env (ex. $HOME) et que j'ecris $HOME dans le fichier alors ca le ferme et ca n'ecrit pas la valeur expand de $HOME
- Refuser un delim avec des quotes ouvertes (c'est deja prevu dans le parsing)

- Dire a Erika de retirer '>&' parmi les cas a gerer, car on va simplement le traiter comme une chaine classique (une valeur litterale)
- Quand je provoque une boucle infinie alors minishell casse. Il faudrait voir si le pb est decelable en correction, et si oui comment gerer
les signaux et eviter ce pb.

- $? peut directement etre gere dans ft_expand car il faut obtenir le code d'erreur directement dans les tokens pour pouvoir l'incorporer dans
execve. Par exemple "ls $?" renvoie ls: cannot access '0': No such file or directory. Aller voir le commentaire mis dans ft_expand

- Aller chercher les cas d'erreur a gerer par mail

- Que pasa si j'ecris $$$$$$$ : ca le prend en entier comme un token, alors que sur bash ca sort
le PID actuel du processus pour chaque paire de $$. Donc une concatenation du meme PID.