//Difference entre un directory et une chaine random pour >

ls $HOME>> cava 	insere le resultat de ls dans le fichier cava
ls TODO>> cava 		insere "TODO" (str random) dans le fichier cava
ls $hello>> cava 	insere hello=TODO (str random) dans le fichier cava 

CONCLUSION : le directory est integre dans ls je pense. Ensuite ca recupere
le dernier truc (resultat ls) et ca l'integre dans cava

//Difference entre un directory et une chaine random pour <
ls $HOME< cava stdin est redirige vers cava. ls tente de lire
dans $HELLO (format expand), s'il peut alors pas de message d'erreur
et ls affiche "TODO"

//Bizzarerie
$HOME''$HOME donne /home/aisidore/home/aisidore

//Concatenation
"$HOME""$HOME" donne /home/aisidore/home/aisidore

//Chaine litterale vs token
- '<<' correspond a la valeur litterale << et non a la regle.
J'envoie a Erika '<<' ou "<<" donc directement ce que le user a entre.
Ainsi elle saura que '<<' doit etre considere comme une commande OU un argument

CONCLUSION : Si un user ecrit '<''<' alors je considere la valeur litterale '<<'
			 Si un user ecrit '<'< alors je considere 2 token, la litterale '<' et la regle <
			 Si un user ecrit "<<"lol alors je considere la valeur litterale <<lol
Apres traitement, il n'y a que 5 cas dans lesquels je laisse la quote (sq ou dq) que le user a mis,
a savoir pour : < << > >> et |. Pour tout le reste je retire les single quote et double quote
tant qu'on est hors d'une chaine de caractere.

Fonction : (If str[0] == \'   ou \" et que !ft_istok(str + 1) alors je retire le 1er et le dernier guillemet
			else je retire les guillements a l'interieur des guillemets. Ensuite je repasse sur la chaine
			et si je constate que ce qu'il y a Ã  l'interieur des '' (ou "") n'est pas un token, je retire le 1er et le dernier guillemet)

		Par exemple : "oui" donne oui
					  '<''<' donne '<<'
					  '<  'oui'  <' donne <  oui  < apres les 2 etapes.
					  "<""<" donne "<<"

		AUTRE IDEE : je parcours chaque result[*j]. Des que j'entre dans une quote (sq ou dq) si je tombe sur une quote (sq ou dq) colle a une autre
		Alors je supprime les 2. NON car " oui    r''    oui   " donne : oui    r''    oui

		BEST I GUESS : si deux string sont colles alors je supprime le delimiteur de fin de la 1ere
		et le delimiteur de debut de la deuxieme.
		Mais attention ca veut dire qu'on pourra avoir des trucs comme '<<". C'est pas tres grave 