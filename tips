flags pour valgrind

valgrind --suppressions=readline.supp --trace-children=yes --track-fds=yes --leak-check=full --show-leak-kinds=all ./minishell


valgrind --suppressions=readline.supp --track-fds=yes --leak-check=full --show-leak-kinds=all ./minishell

a faire
mettre a la norme
built in
signaux fonction expres signaux dans heredoc, gerer signaux hors mode interactif ex cat ; code erreur a gerer voir cat puis ctrl c puis $? donne 130 github openbsd
pwd a faire avec getcpwd
tester minishell dans minishell
shlvl voir adrien
echo : il faut expand les var d'env avec echo sauf sq
le dernier enfant doit envoyer son exit code au parent avec waitpid
gerer boucle infini yes ; yes | head
redir sans cmd // code erreur ?

2 cas a gerer entre partie adri et partie erika : - si j'ai une redir comme < $a avec a="boloss 'ca va'" (var contenant espace et?ou quotes) alors je dois expand quand je cree la redir. Adri m'enverra $/n/ta
                                                  - si j'ai ls $a (une var contenant des quotes) alors je dois split avec sep=' ' quand je remplit cmd.
si j ai une redir avec $\n mais pas $\n\t alors la var env n existe pas et il faut un message d'erreur (toute redir sauf heredoc) et ca ne lance pas l'enfant test a faire

si un .here est utilise comme sortie > >> alors message d'iterdiction.

verifier l affichage des differents types d erreur


Quand Erika recupere les redirections il faudra qu'elle check si le nom de la redirection commence
par $\n. Si oui alors elle ouvre les potentiels heredoc et quand le user les a ferme
elle affiche le message"bash: [nom] ambiguous redirect" et elle
ne lance pas la commande concernee
on ne comprends le fonctionnement de ces commandes :
bash-5.1$ ls | ls < $a | cat
bash: $a: ambiguous redirect
bash-5.1$ cat | ls < $a | ls
bash: $a: ambiguous redirect
 a	 gc	    minishell	       objets	       tips
 a.out	 l	    minishell.h        readline.supp   TODO
"'ca"	 Makefile   minishell_tester   sources	       ujygj
c
ls | <$a
dans ce cas la uniquement la commende concernee ne se lance pas, le reste si

 


ce cas la est mal gere : << here | ls

 Permission denied : si pas droit mais si fichier non existant le message est different

valgrind <a

<< aa grep a >a | << bb grep b >>a
<< aa grep a >a

echo "cat lol.c | cat > lol.c"




pour la correction :
./minishell | ./minishell ne marche pas car bash | bash ne marche pas
1> 2> pas a etre gerer
ls | hola fait un sigpipe c est normal ; env | hola non car built in donc on a pas programme pour que ca fasse ca
Si creation fichier .here : interdiciton dajouter fichiers dans code source. .here est reserve a notre shell, interdiction
d'utiliser ce mot (comme shell peut le faire pour if elif ...)




